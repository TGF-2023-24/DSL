/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.serializer;

import RedDePetri.Arco;
import RedDePetri.ArcoLT;
import RedDePetri.ArcoTL;
import RedDePetri.Lugar;
import RedDePetri.RdP;
import RedDePetri.RedDePetriPackage;
import RedDePetri.Transicion;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RedDePetriPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RedDePetriPackage.ARCO:
				sequence_Arco_Impl(context, (Arco) semanticObject); 
				return; 
			case RedDePetriPackage.ARCO_LT:
				sequence_ArcoLT(context, (ArcoLT) semanticObject); 
				return; 
			case RedDePetriPackage.ARCO_TL:
				sequence_ArcoTL(context, (ArcoTL) semanticObject); 
				return; 
			case RedDePetriPackage.LUGAR:
				sequence_Lugar(context, (Lugar) semanticObject); 
				return; 
			case RedDePetriPackage.RD_P:
				sequence_RdP(context, (RdP) semanticObject); 
				return; 
			case RedDePetriPackage.TRANSICION:
				sequence_Transicion(context, (Transicion) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Arco returns ArcoLT
	 *     ArcoLT returns ArcoLT
	 *
	 * Constraint:
	 *     (peso=EInt origen=[Lugar|EString] destino=[Transicion|EString])
	 * </pre>
	 */
	protected void sequence_ArcoLT(ISerializationContext context, ArcoLT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RedDePetriPackage.Literals.ARCO__PESO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RedDePetriPackage.Literals.ARCO__PESO));
			if (transientValues.isValueTransient(semanticObject, RedDePetriPackage.Literals.ARCO_LT__ORIGEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RedDePetriPackage.Literals.ARCO_LT__ORIGEN));
			if (transientValues.isValueTransient(semanticObject, RedDePetriPackage.Literals.ARCO_LT__DESTINO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RedDePetriPackage.Literals.ARCO_LT__DESTINO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArcoLTAccess().getPesoEIntParserRuleCall_3_0(), semanticObject.getPeso());
		feeder.accept(grammarAccess.getArcoLTAccess().getOrigenLugarEStringParserRuleCall_5_0_1(), semanticObject.eGet(RedDePetriPackage.Literals.ARCO_LT__ORIGEN, false));
		feeder.accept(grammarAccess.getArcoLTAccess().getDestinoTransicionEStringParserRuleCall_7_0_1(), semanticObject.eGet(RedDePetriPackage.Literals.ARCO_LT__DESTINO, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Arco returns ArcoTL
	 *     ArcoTL returns ArcoTL
	 *
	 * Constraint:
	 *     (peso=EInt origen=[Transicion|EString] destino=[Lugar|EString])
	 * </pre>
	 */
	protected void sequence_ArcoTL(ISerializationContext context, ArcoTL semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RedDePetriPackage.Literals.ARCO__PESO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RedDePetriPackage.Literals.ARCO__PESO));
			if (transientValues.isValueTransient(semanticObject, RedDePetriPackage.Literals.ARCO_TL__ORIGEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RedDePetriPackage.Literals.ARCO_TL__ORIGEN));
			if (transientValues.isValueTransient(semanticObject, RedDePetriPackage.Literals.ARCO_TL__DESTINO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RedDePetriPackage.Literals.ARCO_TL__DESTINO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArcoTLAccess().getPesoEIntParserRuleCall_3_0(), semanticObject.getPeso());
		feeder.accept(grammarAccess.getArcoTLAccess().getOrigenTransicionEStringParserRuleCall_5_0_1(), semanticObject.eGet(RedDePetriPackage.Literals.ARCO_TL__ORIGEN, false));
		feeder.accept(grammarAccess.getArcoTLAccess().getDestinoLugarEStringParserRuleCall_7_0_1(), semanticObject.eGet(RedDePetriPackage.Literals.ARCO_TL__DESTINO, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Arco returns Arco
	 *     Arco_Impl returns Arco
	 *
	 * Constraint:
	 *     peso=EInt
	 * </pre>
	 */
	protected void sequence_Arco_Impl(ISerializationContext context, Arco semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RedDePetriPackage.Literals.ARCO__PESO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RedDePetriPackage.Literals.ARCO__PESO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArco_ImplAccess().getPesoEIntParserRuleCall_3_0(), semanticObject.getPeso());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Lugar returns Lugar
	 *
	 * Constraint:
	 *     (name=EString marca=EInt)
	 * </pre>
	 */
	protected void sequence_Lugar(ISerializationContext context, Lugar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RedDePetriPackage.Literals.LUGAR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RedDePetriPackage.Literals.LUGAR__NAME));
			if (transientValues.isValueTransient(semanticObject, RedDePetriPackage.Literals.LUGAR__MARCA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RedDePetriPackage.Literals.LUGAR__MARCA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLugarAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLugarAccess().getMarcaEIntParserRuleCall_4_0(), semanticObject.getMarca());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RdP returns RdP
	 *
	 * Constraint:
	 *     (
	 *         transiciones+=Transicion 
	 *         transiciones+=Transicion* 
	 *         lugares+=Lugar 
	 *         lugares+=Lugar* 
	 *         arcos+=Arco 
	 *         arcos+=Arco*
	 *     )
	 * </pre>
	 */
	protected void sequence_RdP(ISerializationContext context, RdP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Transicion returns Transicion
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_Transicion(ISerializationContext context, Transicion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RedDePetriPackage.Literals.TRANSICION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RedDePetriPackage.Literals.TRANSICION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransicionAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
