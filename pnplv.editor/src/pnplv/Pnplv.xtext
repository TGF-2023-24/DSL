// automatically generated by Xtext
grammar pnplv.Pnplv with org.eclipse.xtext.common.Terminals

import "platform:/resource/pnplv/model/pnplv.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

FeatureConfiguration returns FeatureConfiguration:
	'FeatureConfiguration'
	'{'
		'pn_150' pn_150=Pn
		'featuremodel' featuremodel=FeatureModel
		'presencecondition' '{' presencecondition+=PresenceCondition ( "," presencecondition+=PresenceCondition)* '}' 
	'}';




Element returns Element:
	Element_Impl | Place | Transition | Arc_Impl | ArcTP | ArcPT;

Operand returns Operand:
	Operand_Impl | Unary_Impl | not | Binary | Base;




Pn returns Pn:
	'Pn'
	'{'
		'elements' '{' elements+=Element ( "," elements+=Element)* '}' 
	'}';

FeatureModel returns FeatureModel:
	'FeatureModel'
	'{'
		'formula' formula=Operand
		'features' '{' features+=Feature ( "," features+=Feature)* '}' 
	'}';

PresenceCondition returns PresenceCondition:
	'PresenceCondition'
	id=EString
	'{'
		'formula' formula=Operand
	'}';

Element_Impl returns Element:
	'Element'
	name=EString
	'{'
		'presencecondition' presencecondition=[PresenceCondition|EString]
	'}';

EString returns ecore::EString:
	STRING | ID;

Place returns Place:
	'Place'
	name=EString
	'{'
		'tokens' tokens=EInt
		'presencecondition' presencecondition=[PresenceCondition|EString]
	'}';

Transition returns Transition:
	'Transition'
	name=EString
	'{'
		'presencecondition' presencecondition=[PresenceCondition|EString]
	'}';

Arc_Impl returns Arc:
	'Arc'
	name=EString
	'{'
		'weight' weight=EInt
		'presencecondition' presencecondition=[PresenceCondition|EString]
	'}';

ArcTP returns ArcTP:
	'ArcTP'
	name=EString
	'{'
		'weight' weight=EInt
		'presencecondition' presencecondition=[PresenceCondition|EString]
		'source' source=[Transition|EString]
		'target' target=[Place|EString]
	'}';

ArcPT returns ArcPT:
	'ArcPT'
	name=EString
	'{'
		'weight' weight=EInt
		'presencecondition' presencecondition=[PresenceCondition|EString]
		'source' source=[Place|EString]
		'target' target=[Transition|EString]
	'}';

EInt returns ecore::EInt:
	'-'? INT;

Operand_Impl returns Operand:
	{Operand}
	'Operand'
	;

Feature returns Feature:
	{Feature}
	'Feature'
	name=EString;

Unary_Impl returns Unary:
	'Unary'
	'{'
		'op' op=UnEnum
		'right' right=Operand
	'}';

not returns not:
	'not'
	'{'
		'op' op=UnEnum
		'right' right=Operand
	'}';

Binary returns Binary:
	'Binary'
	'{'
		'op' op=BinEnum
		'left' left=Operand
		'right' right=Operand
	'}';

Base returns Base:
	'Base'
	'{'
		'feature' feature=[Feature|EString]
	'}';

enum UnEnum returns UnEnum:
				not = 'not';

enum BinEnum returns BinEnum:
				and = 'and' | or = 'or' | xor = 'xor' | double_implication = 'double_implication' | implies = 'implies';
