/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getArcoAccess().getAlternatives(), "rule__Arco__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getRdPAccess().getGroup(), "rule__RdP__Group__0");
			builder.put(grammarAccess.getRdPAccess().getGroup_5(), "rule__RdP__Group_5__0");
			builder.put(grammarAccess.getRdPAccess().getGroup_10(), "rule__RdP__Group_10__0");
			builder.put(grammarAccess.getRdPAccess().getGroup_15(), "rule__RdP__Group_15__0");
			builder.put(grammarAccess.getTransicionAccess().getGroup(), "rule__Transicion__Group__0");
			builder.put(grammarAccess.getLugarAccess().getGroup(), "rule__Lugar__Group__0");
			builder.put(grammarAccess.getArco_ImplAccess().getGroup(), "rule__Arco_Impl__Group__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getArcoTLAccess().getGroup(), "rule__ArcoTL__Group__0");
			builder.put(grammarAccess.getArcoLTAccess().getGroup(), "rule__ArcoLT__Group__0");
			builder.put(grammarAccess.getRdPAccess().getTransicionesAssignment_4(), "rule__RdP__TransicionesAssignment_4");
			builder.put(grammarAccess.getRdPAccess().getTransicionesAssignment_5_1(), "rule__RdP__TransicionesAssignment_5_1");
			builder.put(grammarAccess.getRdPAccess().getLugaresAssignment_9(), "rule__RdP__LugaresAssignment_9");
			builder.put(grammarAccess.getRdPAccess().getLugaresAssignment_10_1(), "rule__RdP__LugaresAssignment_10_1");
			builder.put(grammarAccess.getRdPAccess().getArcosAssignment_14(), "rule__RdP__ArcosAssignment_14");
			builder.put(grammarAccess.getRdPAccess().getArcosAssignment_15_1(), "rule__RdP__ArcosAssignment_15_1");
			builder.put(grammarAccess.getTransicionAccess().getNameAssignment_2(), "rule__Transicion__NameAssignment_2");
			builder.put(grammarAccess.getLugarAccess().getNameAssignment_1(), "rule__Lugar__NameAssignment_1");
			builder.put(grammarAccess.getLugarAccess().getMarcaAssignment_4(), "rule__Lugar__MarcaAssignment_4");
			builder.put(grammarAccess.getArco_ImplAccess().getPesoAssignment_3(), "rule__Arco_Impl__PesoAssignment_3");
			builder.put(grammarAccess.getArcoTLAccess().getPesoAssignment_3(), "rule__ArcoTL__PesoAssignment_3");
			builder.put(grammarAccess.getArcoTLAccess().getOrigenAssignment_5(), "rule__ArcoTL__OrigenAssignment_5");
			builder.put(grammarAccess.getArcoTLAccess().getDestinoAssignment_7(), "rule__ArcoTL__DestinoAssignment_7");
			builder.put(grammarAccess.getArcoLTAccess().getPesoAssignment_3(), "rule__ArcoLT__PesoAssignment_3");
			builder.put(grammarAccess.getArcoLTAccess().getOrigenAssignment_5(), "rule__ArcoLT__OrigenAssignment_5");
			builder.put(grammarAccess.getArcoLTAccess().getDestinoAssignment_7(), "rule__ArcoLT__DestinoAssignment_7");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
